<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://conanwang.github.io</id>
    <title>全不栈工程师</title>
    <updated>2021-12-23T06:47:15.486Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://conanwang.github.io"/>
    <link rel="self" href="https://conanwang.github.io/atom.xml"/>
    <subtitle>记录conan日常学习点滴</subtitle>
    <logo>https://conanwang.github.io/images/avatar.png</logo>
    <icon>https://conanwang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 全不栈工程师</rights>
    <entry>
        <title type="html"><![CDATA[myloader选项说明]]></title>
        <id>https://conanwang.github.io/post/myloader-xuan-xiang-shuo-ming/</id>
        <link href="https://conanwang.github.io/post/myloader-xuan-xiang-shuo-ming/">
        </link>
        <updated>2021-12-21T10:59:13.000Z</updated>
        <content type="html"><![CDATA[<p>Application Options:</p>
<p>-d, --directory                  待导入的数据</p>
<p>-q, --queries-per-transaction     Number of queries per transaction, default 1000</p>
<p>-o, --overwrite-tables            Drop tables if they already exist</p>
<p>-B, --database                    An alternative database to restore into</p>
<p>-s, --source-db                   Database to restore</p>
<p>-e, --enable-binlog               Enable binary logging of the restore data</p>
<p>--innodb-optimize-keys            Creates the table without the indexes and it adds them at the end</p>
<p>--set-names                       Sets the names, use it at your own risk, default binary</p>
<p>-L, --logfile                     Log file name to use, by default stdout is used</p>
<p>--purge-mode                      This specify the truncate mode which can be: NONE, DROP, TRUNCATE and DELETE</p>
<p>--disable-redo-log                Disables the REDO_LOG and enables it after, doesn't check initial status</p>
<p>-r, --rows                        Split the INSERT statement into this many rows.</p>
<p>--max-threads-per-table           Maximum number of threads per table to use, default 4</p>
<p>-h, --host                        The host to connect to</p>
<p>-u, --user                        Username with the necessary privileges</p>
<p>-p, --password                    User password</p>
<p>-a, --ask-password                Prompt For User password</p>
<p>-P, --port                        TCP/IP port to connect to</p>
<p>-S, --socket                      UNIX domain socket file to use for connection</p>
<p>-t, --threads                     Number of threads to use, default 4</p>
<p>-C, --compress-protocol           Use compression on the MySQL connection</p>
<p>-V, --version                     Show the program version and exit</p>
<p>-v, --verbose                     Verbosity of output, 0 = silent, 1 = errors, 2 = warnings, 3 = info, default 2</p>
<p>--defaults-file                   Use a specific defaults file</p>
<p>--ssl                             Connect using SSL</p>
<p>--ssl-mode                        Desired security state of the connection to the server: DISABLED, PREFERRED, REQUIRED, VERIFY_CA, VERIFY_IDENTITY</p>
<p>--key                             The path name to the key file</p>
<p>--cert                            The path name to the certificate file</p>
<p>--ca                              The path name to the certificate authority file</p>
<p>--capath                          The path name to a directory that contains trusted SSL CA certificates in PEM format</p>
<p>--cipher                          A list of permissible ciphers to use for SSL encryption</p>
<p>--tls-version                     Which protocols the server permits for encrypted connections</p>
<p>--stream                          It will stream over STDOUT once the files has been written</p>
<p>--no-delete                       It will not delete the files after stream has been completed</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mydumper源码学习系列1-获取全局锁失败可能引起不一致的同步位点]]></title>
        <id>https://conanwang.github.io/post/ce-shi-wen-zhang/</id>
        <link href="https://conanwang.github.io/post/ce-shi-wen-zhang/">
        </link>
        <updated>2021-12-21T08:21:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>  最近在做一些mydumper的需求，写下这个系列文章全当学习记录。</p>
<h2 id="背景">背景</h2>
<p>  近期在工作中，发现mydumper出来的一份全量数据，用来做备机数据，建立主从关系后，备机总是发生“1032”找不到数据行的错误，不由让我怀疑难道备份出来的数据和源db是不一致的吗？</p>
<h2 id="mydumper当前备份逻辑说明">mydumper当前备份逻辑说明</h2>
<p>  mydumper当前备份逻辑流程如下：<br>
<img src="https://conanwang.github.io/post-images/1640080061444.png" alt="" loading="lazy"><br>
<strong>主要步骤概括</strong></p>
<ul>
<li>主线程 FLUSH TABLES WITH READ LOCK, 施加全局只读锁，以阻止DML语句写入，保证数据的一致性</li>
<li>读取当前时间点的二进制日志文件名和日志写入的位置并记录在metadata文件中，以供即使点恢复使用</li>
<li>N个（线程数可以指定，默认是4）dump线程 START TRANSACTION WITH CONSISTENT SNAPSHOT; 开启读一致的事物</li>
<li>dump non-InnoDB tables, 首先导出非事物引擎的表</li>
<li>主线程 UNLOCK TABLES 非事物引擎备份完后，释放全局只读锁</li>
<li>dump InnoDB tables, 基于事物导出InnoDB表</li>
<li>事务结束</li>
</ul>
<h2 id="flush-tables-with-read-lock如果执行失败会怎么样">flush tables with read lock如果执行失败会怎么样？</h2>
<p>  通过上述的备份步骤，我们可以知道，&quot;FLUSH TABLES WITH READ LOCK&quot; 获取全局只读锁是为了防止其他会话修改数据，这样才能获取一致性的同步位点。那么问题来了，如果获取全局锁失败失败会怎么样？<br>
​  想象一下，当获取全局锁失败的情况下，这个时候其他会话对数据库继续进行读写，此时，如果mydumper继续通过&quot;show master status&quot; 获取备份同步点，这个同步点肯定是不一致的，用这个备份来做备机建立主从关系，在日后的同步过程中必然会由于1032，1062之类的错误导致同步中断.</p>
<h2 id="如果全局锁获取失败mydumper会怎么处理呢">如果全局锁获取失败，mydumper会怎么处理呢</h2>
<p>  那么焦点问题就来了，如果全局锁获取失败，也就是由于某种原因“FLUSH TABLES WITH READ LOCK” 执行失败，mydumper后续会怎么做呢？让我们从代码中一探究竟。<br>
  打开mydumper.c文件，备份的逻辑几乎全部在这个文件里, 重点关注start_dump这个函数<br>
<img src="https://conanwang.github.io/post-images/1640081578895.jpg" alt="" loading="lazy"><br>
这里我们重点看上图中的1，2，3，4这个4个标记的地方：</p>
<ul>
<li>标记1，判断执行FLUSH TABLES WITH READ LOCK是否成功</li>
<li>标记2，如果执行失败，则打印日志Couldn't acquire global lock, snapshots will not be 字样的日志在stderr标准错误上。</li>
<li>标记3，errors变量值自增加1。</li>
<li>标记4，我们先不要看标记4，这一行是我加的，官方的实现只有标记1，2，3。<br>
从代码里我们明确了，即使获取不到全局锁，mydumper依然继续后续的备份动作，那errors这个变量自增1到底有啥用？<br>
  让我们回到main主函数，可以看到在函数的结尾处，最后的程序执行状态码是根据errors来设置的，也就是说获取全局锁失败的唯一体现就是在程序执行完毕后查看$?的值才能体现出来，如果没有检查这个状态码，或者采用外部调用mydumper的方式来执行，没有关注这个状态码，那么，得到的数据备份集就可能是不一致的。<br>
<img src="https://conanwang.github.io/post-images/1640082310897.jpg" alt="" loading="lazy"></li>
</ul>
<h2 id="如何改进">如何改进</h2>
<p>  在我看来，避免这一情况，就是要显示的让备份失败，也就是不能生成看似正常的备份集，那么mydumper导出来的数据到底怎么样才是正常的备份集，myloader是怎么判断的呢？其实很简单，就是看备份目录里是否有metadata文件产生，如果备份不是正常结束，则产生的是类似，metadata.patiral这样的文件。于是，当获取不到全局锁，直接让程序退出，我觉得是最直接的办法，于是，有了之前标记4的代码。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://conanwang.github.io/post/hello-gridea/</id>
        <link href="https://conanwang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>